%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(TM) 3.2
%%AI8_CreatorVersion: 10.0
%%For: (Kalvin) (Zork)
%%Title: (diagbh.eps)
%%CreationDate: 3/25/2003 9:20 PM
%%BoundingBox: 116 338 379 454
%%DocumentProcessColors: Cyan Magenta Yellow Black
%%DocumentFonts: Helvetica
%%+ Times-Roman
%%DocumentNeededFonts: Helvetica
%%+ Times-Roman
%%DocumentSuppliedResources: procset Adobe_packedarray 2.0 0
%%+ procset Adobe_cmykcolor 1.1 0
%%+ procset Adobe_cshow 1.1 0
%%+ procset Adobe_customcolor 1.0 0
%%+ procset Adobe_typography_AI3 1.0 1
%%+ procset Adobe_pattern_AI3 1.0 0
%%+ procset Adobe_Illustrator_AI3 1.0 1
%AI3_ColorUsage: Color
%AI3_IncludePlacedImages
%AI3_TemplateBox: 306.5 395.5 306.5 395.5
%AI3_TileBox: 12 12 588 780
%AI3_DocumentPreview: Header
%%PageOrigin:12 12
%%AI3_PaperRect:-12 780 600 -12
%%AI3_Margin:12 -12 -24 12
%AI7_GridSettings: 5 10 5 10 1 0 0.8 0.8 0.8 0.9 0.9 0.9
%AI9_Flatten: 1
%%EndComments
%%BeginProlog
%%BeginResource: procset Adobe_packedarray 2.0 0
%%Title: (Packed Array Operators)
%%Version: 2.0 0
%%CreationDate: (8/2/90) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /Adobe_packedarray 5 dict dup begin put
/initialize
{
/packedarray where
	{
	pop
	}
	{
	Adobe_packedarray begin
	Adobe_packedarray
		{
		dup xcheck
			{
			bind
			} if
		userdict 3 1 roll put
		} forall
 end
	} ifelse
} def
/terminate
{
} def
/packedarray
{
array astore readonly
} def
/setpacking
{
pop
} def
/currentpacking
{
false
} def
currentdict readonly pop end
%%EndResource
Adobe_packedarray /initialize get exec
%%BeginResource: procset Adobe_cmykcolor 1.1 0
%%Title: (CMYK Color Operators)
%%Version: 1.1 0
%%CreationDate: (1/23/89) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_cmykcolor 4 dict dup begin put
/initialize
{
/setcmykcolor where
	{
	pop
	}
	{
	userdict /Adobe_cmykcolor_vars 2 dict dup begin put
	/_setrgbcolor
		/setrgbcolor load def
	/_currentrgbcolor
		/currentrgbcolor load def
	Adobe_cmykcolor begin
	Adobe_cmykcolor
		{
		dup xcheck
			{
			bind
			} if
		pop pop
		} forall
 end
 end
	Adobe_cmykcolor begin
	} ifelse
} def
/terminate
{
currentdict Adobe_cmykcolor eq
	{
 end
	} if
} def
/setcmykcolor
{
1 sub 4 1 roll
3
	{
	3 index add neg dup 0 lt
		{
		pop 0
		} if
	3 1 roll
	} repeat
Adobe_cmykcolor_vars /_setrgbcolor get exec
pop
} def 
/currentcmykcolor
{
Adobe_cmykcolor_vars /_currentrgbcolor get exec
3
	{
	1 sub neg 3 1 roll
	} repeat
0
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_cshow 1.1 0
%%Title: (cshow Operator)
%%Version: 1.1 0
%%CreationDate: (1/23/89) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_cshow 3 dict dup begin put
/initialize
{
/cshow where
	{
	pop
	}
	{
	userdict /Adobe_cshow_vars 1 dict dup begin put
	/_cshow
		{} def
	Adobe_cshow begin
	Adobe_cshow
		{
		dup xcheck
			{
			bind
			} if
		userdict 3 1 roll put
		} forall
 end
 end
	} ifelse
} def
/terminate
{
} def
/cshow
{
exch
Adobe_cshow_vars
	exch /_cshow
	exch put
	{
	0 0 Adobe_cshow_vars /_cshow get exec
	} forall
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_customcolor 1.0 0
%%Title: (Custom Color Operators)
%%Version: 1.0 0
%%CreationDate: (5/9/88) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_customcolor 5 dict dup begin put
/initialize
{
/setcustomcolor where
	{
	pop
	}
	{
	Adobe_customcolor begin
	Adobe_customcolor
		{
		dup xcheck
			{
			bind
			} if
		pop pop
		} forall
 end
	Adobe_customcolor begin
	} ifelse
} def
/terminate
{
currentdict Adobe_customcolor eq
	{
 end
	} if
} def
/findcmykcustomcolor
{
5 packedarray
}  def
/setcustomcolor
{
exch
aload pop pop
4
	{
	4 index mul 4 1 roll
	} repeat
5 -1 roll pop
setcmykcolor
} def
/setoverprint
{
pop
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_typography_AI3 2.0 0
%%Title: (Typography Operators)
%%Version: 2.0 0
%%CreationDate:(5/31/90) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_typography_AI3 48 dict dup begin put
/initialize
{
/TZ
 where
	{
	pop
	}
	{
	Adobe_typography_AI3 begin
	Adobe_typography_AI3
		{
		dup xcheck
			{
			bind
			} if
		pop pop
		} forall
 end
	Adobe_typography_AI3 begin
	} ifelse
} def
/terminate
{
currentdict Adobe_typography_AI3 eq
	{
 end
	} if
} def
/modifyEncoding
{
	/_tempEncode exch ddef
	
	/_pntr 0 ddef
	
	{
		counttomark -1 roll
		dup type dup /marktype eq 		
		{
			pop pop exit
		}
		{
			/nametype eq
			{
				_tempEncode /_pntr dup load dup 3 1 roll 1 add ddef 3 -1 roll
				put
			}
			{
				/_pntr exch ddef					
			}
			ifelse
		}
		ifelse
	}
	loop	
	
	_tempEncode
}
def
/TE
{
	StandardEncoding 256 array copy modifyEncoding 
	/_nativeEncoding exch def
} def
%
/TZ		
{
	dup type /arraytype eq {/_wv exch def} {/_wv 0 def} ifelse 
	/_useNativeEncoding exch def
	pop pop
	
	findfont _wv type /arraytype eq {_wv makeblendedfont} if dup length 2 add dict
	
 begin
	
		mark exch
		{
			1 index /FID ne { def } if cleartomark mark
		}
		forall
		pop
		
		/FontName exch def
		
		counttomark 0 eq
		{
			1 _useNativeEncoding eq
			{
				/Encoding _nativeEncoding def
			}
			if
			cleartomark
		}
		{	
			/Encoding load 256 array copy 
			modifyEncoding /Encoding exch def
		}
		ifelse		
		FontName currentdict
 end
	
	definefont pop
}
def
/tr
{
_ax _ay 3 2 roll
} def
/trj
{
_cx _cy _sp _ax _ay 6 5 roll
} def
/a0
{
/Tx
	{
	dup 
	currentpoint 3 2 roll
	tr _psf
	newpath moveto
	tr _ctm _pss
	} ddef
/Tj
	{
	dup
	currentpoint 3 2 roll
	trj _pjsf
	newpath moveto
	trj _ctm _pjss
	} ddef
	
} def
/a1
{
/Tx
	{
	dup currentpoint 4 2 roll gsave
	dup currentpoint 3 2 roll
	tr _psf
	newpath moveto
	tr _ctm _pss
	grestore 3 1 roll moveto tr sp
	} ddef
/Tj
	{
	dup currentpoint 4 2 roll gsave
	dup currentpoint 3 2 roll
	trj _pjsf
	newpath moveto
	trj _ctm _pjss
	grestore 3 1 roll moveto tr sp
	} ddef
	
} def
/e0
{
/Tx
	{
	tr _psf
	} ddef
/Tj
	{
	trj _pjsf
	} ddef
} def
/e1
{
/Tx
	{
	dup currentpoint 4 2 roll gsave 
	tr _psf  
	grestore 3 1 roll moveto tr sp 
	} ddef
/Tj
	{
	dup currentpoint 4 2 roll gsave 
	trj _pjsf
	grestore 3 1 roll moveto tr sp 
	} ddef
} def
/i0
{
/Tx
	{
	tr sp
	} ddef
/Tj
	{
	trj jsp
	} ddef
} def
/i1
{
W N
} def
/o0
{
/Tx
	{
	tr sw rmoveto
	} ddef
/Tj
	{
	trj swj rmoveto
	} ddef
} def
/r0
{
/Tx
	{
	tr _ctm _pss
	} ddef
/Tj
	{
	trj _ctm _pjss
	} ddef
} def
/r1
{
/Tx
	{
	dup currentpoint 4 2 roll currentpoint gsave newpath moveto
	tr _ctm _pss 
	grestore 3 1 roll moveto tr sp 
	} ddef
/Tj
	{
	dup currentpoint 4 2 roll currentpoint gsave newpath moveto
	trj _ctm _pjss
	grestore 3 1 roll moveto tr sp 
	} ddef
} def
/To
{
	pop _ctm currentmatrix pop
} def
/TO
{
	iTe _ctm setmatrix newpath
} def
/Tp
{
	pop _tm astore pop _ctm setmatrix 
	_tDict begin /W {} def /h {} def
} def
/TP
{
 end
	iTm 0 0 moveto
} def
/Tr
{
	_render 3 le {currentpoint newpath moveto} if
	dup 8 eq {pop 0} {dup 9 eq {pop 1} if} ifelse
	dup /_render exch ddef
	_renderStart exch get load exec
} def
/iTm
{
_ctm setmatrix _tm concat 0 _rise translate _hs 1 scale
} def
/Tm
{
_tm astore pop iTm 0 0 moveto
} def
/Td
{
_mtx translate _tm _tm concatmatrix pop iTm 0 0 moveto
} def
/iTe
{
	_render -1 eq {} {_renderEnd _render get dup null ne {load exec} {pop} ifelse} ifelse
	/_render -1 ddef
} def
/Ta
{
pop
} def
/Tf
{
dup 1000 div /_fScl exch ddef
exch findfont exch scalefont setfont
} def
/Tl
{
pop
0 exch _leading astore pop
} def
/Tt
{
pop
} def
/TW
{
3 npop
} def
/Tw
{
/_cx exch ddef
} def
/TC
{
3 npop
} def
/Tc
{
/_ax exch ddef
} def
/Ts
{
/_rise exch ddef
currentpoint
iTm
moveto
} def
/Ti
{
3 npop
} def
/Tz
{
100 div /_hs exch ddef
iTm
} def
/TA
{
pop
} def
/Tq
{
pop
} def
/Th
{
pop pop pop pop pop
} def
/TX {pop} def
%/Tx
%/Tj
/Tk
{
exch pop _fScl mul neg 0 rmoveto
} def
/TK
{
2 npop
} def
/T*
{
_leading aload pop neg Td
} def
/T*-
{
_leading aload pop Td
} def
/T-
{
_hyphen Tx
} def
/T+
{} def
/TR
{
_ctm currentmatrix pop 	
_tm astore pop 
iTm 0 0 moveto 
} def
/TS
{
0 eq {Tx} {Tj} ifelse
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_pattern_AI3 1.1 0
%%Title: (Adobe Illustrator (R) Version 3.0 Pattern Operators)
%%Version: 1.1 0
%%CreationDate: (7/21/89) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_pattern_AI3 16 dict dup begin put
/initialize
{
/definepattern where
	{
	pop
	}
	{
	Adobe_pattern_AI3 begin
	Adobe_pattern_AI3
		{
		dup xcheck
			{
			bind
			} if
		pop pop
		} forall
	mark
	cachestatus 7 1 roll pop pop pop pop exch pop exch
		{
		{
		10000 add
		dup 2 index gt
			{
			exit
			} if
		dup setcachelimit
		} loop
		} stopped
	cleartomark
	} ifelse
} def
/terminate
{
currentdict Adobe_pattern_AI3 eq
	{
 end
	} if
} def
errordict
/nocurrentpoint
{
pop
stop
} put
errordict
/invalidaccess
{
pop
stop
} put
/patternencoding
256 array def
0 1 255
{
patternencoding exch ( ) 2 copy exch 0 exch put cvn put
} for
/definepattern
{
17 dict begin
/uniform exch def
/cache exch def
/key exch def
/procarray exch def
/mtx exch matrix invertmatrix def
/height exch def
/width exch def
/ctm matrix currentmatrix def
/ptm matrix def
/str 32 string def
/slice 9 dict def
slice /s 1 put
slice /q 256 procarray length div sqrt floor cvi put
slice /b 0 put
/FontBBox [0 0 0 0] def
/FontMatrix mtx matrix copy def
/Encoding patternencoding def
/FontType 3 def
/BuildChar
	{
	exch
 begin
	/setstrokeadjust where {pop true setstrokeadjust} if
	slice begin
	dup q dup mul mod s idiv /i exch def
	dup q dup mul mod s mod /j exch def
	q dup mul idiv procarray exch get
	/xl j width s div mul def
	/xg j 1 add width s div mul def
	/yl i height s div mul def
	/yg i 1 add height s div mul def
	uniform
		{
		1 1
		}
		{
		width 0 dtransform
		dup mul exch dup mul add sqrt dup 1 add exch div
		0 height dtransform
		dup mul exch dup mul add sqrt dup 1 add exch div
		} ifelse
	width 0 cache
		{
		xl 4 index mul yl 4 index mul xg 6 index mul yg 6 index mul
		setcachedevice
		}
		{
		setcharwidth
		} ifelse
	gsave
	scale
	newpath
	xl yl moveto
	xg yl lineto
	xg yg lineto
	xl yg lineto
	closepath
	clip
	newpath
 end
 end
	exec
	grestore
	} def
key currentdict definefont
end
} def
/patterncachesize
{
gsave
newpath
0 0 moveto
width 0 lineto
width height lineto
0 height lineto
closepath
patternmatrix setmatrix
pathbbox
exch ceiling 4 -1 roll floor sub 3 1 roll
ceiling exch floor sub
mul 1 add
grestore
} def
/patterncachelimit
{
cachestatus 7 1 roll 6 npop 8 mul
} def
/patternpath
{
exch dup begin setfont
ctm setmatrix
concat
slice exch /b exch slice /q get dup mul mul put
FontMatrix concat
uniform
	{
	width 0 dtransform round width div exch round width div exch
	0 height dtransform round height div exch height div exch
	0 0 transform round exch round exch
	ptm astore setmatrix
	}
	{
	ptm currentmatrix pop
	} ifelse
{currentpoint} stopped not
	{
	2 npop
	pathbbox
	true
	4 index 3 index eq
	4 index 3 index eq
	and
		{
		pop false
			{
			{2 npop}
			{3 npop true}
			{7 npop true}
			{pop true}
			pathforall
			} stopped
			{
			5 npop true
			} if
		} if
		{
		height div ceiling height mul 4 1 roll
		width div ceiling width mul 4 1 roll
		height div floor height mul 4 1 roll
		width div floor width mul 4 1 roll
		2 index sub height div ceiling cvi exch
		3 index sub width div ceiling cvi exch
		4 2 roll moveto
		FontMatrix mtx invertmatrix
		dup dup 4 get exch 5 get rmoveto
		ptm ptm concatmatrix pop
		slice /s
		patterncachesize patterncachelimit div ceiling sqrt ceiling cvi
		dup slice /q get gt
			{
			pop slice /q get
			} if
		put
		0 1 slice /s get dup mul 1 sub
			{
			slice /b get add
			gsave
			0 1 str length 1 sub
				{
				str exch 2 index put
				} for
			pop
			dup
				{
				gsave
				ptm setmatrix
				1 index str length idiv {str show} repeat
				1 index str length mod str exch 0 exch getinterval show
				grestore
				0 height rmoveto
				} repeat
			grestore
			} for
		2 npop
		}
		{
		4 npop
		} ifelse
	} if
end
} def
/patternclip
{
clip
} def
/patternstrokepath
{
strokepath
} def
/patternmatrix
matrix def
/patternfill
{
dup type /dicttype eq
	{
	Adobe_pattern_AI3 /patternmatrix get
	} if
gsave
patternclip
Adobe_pattern_AI3 /patternpath get exec
grestore
newpath
} def
/patternstroke
{
dup type /dicttype eq
	{
	Adobe_pattern_AI3 /patternmatrix get
	} if
gsave
patternstrokepath
true
	{
		{
			{
			newpath 
			moveto
			}
			{
			lineto
			}
			{
			curveto
			}
			{
			closepath
			3 copy
			Adobe_pattern_AI3 /patternfill get exec
			} pathforall
		3 npop
		} stopped
			{
			5 npop
			patternclip
			Adobe_pattern_AI3 /patternfill get exec
			} if
	}
	{
	patternclip
	Adobe_pattern_AI3 /patternfill get exec
	} ifelse
grestore
newpath
} def
/patternashow
{
3 index type /dicttype eq
	{
	Adobe_pattern_AI3 /patternmatrix get 4 1 roll
	} if
	{
	2 npop (0) exch
	2 copy 0 exch put pop
	gsave
	false charpath currentpoint
	6 index 6 index 6 index
	Adobe_pattern_AI3 /patternfill get exec
	grestore
	newpath moveto
	2 copy rmoveto
	} exch cshow
5 npop
} def
/patternawidthshow
{
6 index type /dicttype eq
	{
	Adobe_pattern_AI3 /patternmatrix get 7 1 roll
	} if
	{
	2 npop (0) exch
	2 copy 0 exch put 
	gsave
	_sp eq {5 index 5 index rmoveto} if
	false charpath currentpoint
	9 index 9 index 9 index
	Adobe_pattern_AI3 /patternfill get exec
	grestore
	newpath moveto
	2 copy rmoveto
	} exch cshow
8 npop
} def
/patternashowstroke
{
4 index type /dicttype eq
	{
	patternmatrix /patternmatrix get 5 1 roll
	} if
4 1 roll
	{
	2 npop (0) exch
	2 copy 0 exch put pop
	gsave
	false charpath
	currentpoint
	4 index setmatrix
	7 index 7 index 7 index
	Adobe_pattern_AI3 /patternstroke get exec
	grestore
	newpath moveto
	2 copy rmoveto
	} exch cshow
6 npop
} def
/patternawidthshowstroke
{
7 index type /dicttype eq
	{
	patternmatrix /patternmatrix get 8 1 roll
	} if
7 1 roll
	{
	2 npop (0) exch
	2 copy 0 exch put
	gsave
	_sp eq {5 index 5 index rmoveto} if
	false charpath currentpoint
	7 index setmatrix
	10 index 10 index 10 index
	Adobe_pattern_AI3 /patternstroke get exec
	grestore
	newpath moveto
	2 copy rmoveto
	} exch cshow
9 npop
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_Illustrator_AI3 1.1 0
%%Title: (Adobe Illustrator (R) Version 3.0 Full Prolog)
%%Version: 1.1 0
%%CreationDate: (3/7/1994) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_Illustrator_AI3 71 dict dup begin put
/initialize
{
userdict /Adobe_Illustrator_AI3_vars 67 dict dup begin put
/_lp /none def
/_pf {} def
/_ps {} def
/_psf {} def
/_pss {} def
/_pjsf {} def
/_pjss {} def
/_pola 0 def
/_doClip 0 def
/cf	currentflat def
/_tm matrix def
/_renderStart [/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0] def 
/_renderEnd [null null null null /i1 /i1 /i1 /i1] def
/_render -1 def
/_rise 0 def
/_ax 0 def
/_ay 0 def
/_cx 0 def
/_cy 0 def
/_leading [0 0] def
/_ctm matrix def
/_mtx matrix def
/_sp 16#020 def
/_hyphen (-) def
/_fScl 0 def
/_cnt 0 def
/_hs 1 def
/_nativeEncoding 0 def
/_useNativeEncoding 0 def
/_tempEncode 0 def
/_pntr 0 def
/_tDict 2 dict def
/_wv 0 def
/Tx {} def
/Tj {} def
/CRender {} def
/_AI3_savepage {} def
/_gf null def
/_cf 4 array def
/_if null def
/_of false def
/_fc {} def
/_gs null def
/_cs 4 array def
/_is null def
/_os false def
/_sc {} def
/_pd 1 dict def
/_ed 15 dict def
/_pm matrix def
/_fm null def
/_fd null def
/_fdd null def
/_sm null def
/_sd null def
/_sdd null def
/_i null def
Adobe_Illustrator_AI3 begin
Adobe_Illustrator_AI3 dup /nc get begin
	{
	dup xcheck
		{
		bind
		} if
	pop pop
	} forall
end
end
end
Adobe_Illustrator_AI3 begin
Adobe_Illustrator_AI3_vars begin
newpath
} def
/terminate
{
end
end
} def
/_
null def
/ddef
{
Adobe_Illustrator_AI3_vars 3 1 roll put
} def
/xput
{
dup load dup length exch maxlength eq
	{
	dup dup load dup
	length 2 mul dict copy def
	} if
load begin def end
} def
/npop
{
	{
	pop
	} repeat
} def
/sw
{
dup length exch stringwidth
exch 5 -1 roll 3 index mul add
4 1 roll 3 1 roll mul add
} def
/swj
{
dup 4 1 roll
dup length exch stringwidth 
exch 5 -1 roll 3 index mul add
4 1 roll 3 1 roll mul add 
6 2 roll /_cnt 0 ddef
{1 index eq {/_cnt _cnt 1 add ddef} if} forall pop
exch _cnt mul exch _cnt mul 2 index add 4 1 roll 2 index add 4 1 roll pop pop
} def
/ss
{
4 1 roll
	{
	2 npop 
	(0) exch 2 copy 0 exch put pop
	gsave
	false charpath currentpoint
	4 index setmatrix
	stroke
	grestore
	moveto
	2 copy rmoveto
	} exch cshow
3 npop
} def
/jss
{
4 1 roll
	{
	2 npop 
	(0) exch 2 copy 0 exch put 
	gsave
	_sp eq 
		{
		exch 6 index 6 index 6 index 5 -1 roll widthshow  
		currentpoint
		}
		{
		false charpath currentpoint
		4 index setmatrix stroke
		}ifelse
	grestore
	moveto
	2 copy rmoveto
	} exch cshow
6 npop
} def
/sp
{
	{
	2 npop (0) exch
	2 copy 0 exch put pop
	false charpath
	2 copy rmoveto
	} exch cshow
2 npop
} def
/jsp
{
	{
	2 npop 
	(0) exch 2 copy 0 exch put 
	_sp eq 
		{
		exch 5 index 5 index 5 index 5 -1 roll widthshow  
		}
		{
		false charpath
		}ifelse
	2 copy rmoveto
	} exch cshow
5 npop
} def
/pl
{
transform
0.25 sub round 0.25 add exch
0.25 sub round 0.25 add exch
itransform
} def
/setstrokeadjust where
	{
	pop true setstrokeadjust
	/c
	{
	curveto
	} def
	/C
	/c load def
	/v
	{
	currentpoint 6 2 roll curveto
	} def
	/V
	/v load def
	/y
	{
	2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
	lineto
	} def
	/L
	/l load def
	/m
	{
	moveto
	} def
	}
	{
	/c
	{
	pl curveto
	} def
	/C
	/c load def
	/v
	{
	currentpoint 6 2 roll pl curveto
	} def
	/V
	/v load def
	/y
	{
	pl 2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
	pl lineto
	} def
	/L
	/l load def
	/m
	{
	pl moveto
	} def
	} ifelse
/d
{
setdash
} def
/cf	{} def
/i
{
dup 0 eq
	{
	pop cf
	} if
setflat
} def
/j
{
setlinejoin
} def
/J
{
setlinecap
} def
/M
{
setmiterlimit
} def
/w
{
setlinewidth
} def
/H
{} def
/h
{
closepath
} def
/N
{
_pola 0 eq 
	{
	_doClip 1 eq {clip /_doClip 0 ddef} if 
	newpath
	} 
	{
	/CRender {N} ddef
	}ifelse
} def
/n
{N} def
/F
{
_pola 0 eq 
	{
	_doClip 1 eq 
		{
		gsave _pf grestore clip newpath /_lp /none ddef _fc 
		/_doClip 0 ddef
		}
		{
		_pf
		}ifelse
	} 
	{
	/CRender {F} ddef
	}ifelse
} def
/f
{
closepath
F
} def
/S
{
_pola 0 eq 
	{
	_doClip 1 eq 
		{
		gsave _ps grestore clip newpath /_lp /none ddef _sc 
		/_doClip 0 ddef
		}
		{
		_ps
		}ifelse
	} 
	{
	/CRender {S} ddef
	}ifelse
} def
/s
{
closepath
S
} def
/B
{
_pola 0 eq 
	{
	_doClip 1 eq
	gsave F grestore 
		{
		gsave S grestore clip newpath /_lp /none ddef _sc
		/_doClip 0 ddef
		} 
		{
		S
		}ifelse
	}
	{
	/CRender {B} ddef
	}ifelse
} def
/b
{
closepath
B
} def
/W
{
/_doClip 1 ddef
} def
/*
{
count 0 ne 
	{
	dup type (stringtype) eq {pop} if
	} if 
_pola 0 eq {newpath} if
} def
/u
{} def
/U
{} def
/q
{
_pola 0 eq {gsave} if
} def
/Q
{
_pola 0 eq {grestore} if
} def
/*u
{
_pola 1 add /_pola exch ddef
} def
/*U
{
_pola 1 sub /_pola exch ddef 
_pola 0 eq {CRender} if
} def
/D
{pop} def
/*w
{} def
/*W
{} def
/`
{
/_i save ddef
6 1 roll 4 npop
concat pop
userdict begin
/showpage {} def
0 setgray
0 setlinecap
1 setlinewidth
0 setlinejoin
10 setmiterlimit
[] 0 setdash
/setstrokeadjust where {pop false setstrokeadjust} if
newpath
0 setgray
false setoverprint
} def
/~
{
end
_i restore
} def
/@
{} def
/&
{} def
/O
{
0 ne
/_of exch ddef
/_lp /none ddef
} def
/R
{
0 ne
/_os exch ddef
/_lp /none ddef
} def
/g
{
/_gf exch ddef
/_fc
{
_lp /fill ne
	{
	_of setoverprint
	_gf setgray
	/_lp /fill ddef
	} if
} ddef
/_pf
{
_fc
fill
} ddef
/_psf
{
_fc
ashow
} ddef
/_pjsf
{
_fc
awidthshow
} ddef
/_lp /none ddef
} def
/G
{
/_gs exch ddef
/_sc
{
_lp /stroke ne
	{
	_os setoverprint
	_gs setgray
	/_lp /stroke ddef
	} if
} ddef
/_ps
{
_sc
stroke
} ddef
/_pss
{
_sc
ss
} ddef
/_pjss
{
_sc
jss
} ddef
/_lp /none ddef
} def
/k
{
_cf astore pop
/_fc
{
_lp /fill ne
	{
	_of setoverprint
	_cf aload pop setcmykcolor
	/_lp /fill ddef
	} if
} ddef
/_pf
{
_fc
fill
} ddef
/_psf
{
_fc
ashow
} ddef
/_pjsf
{
_fc
awidthshow
} ddef
/_lp /none ddef
} def
/K
{
_cs astore pop
/_sc
{
_lp /stroke ne
	{
	_os setoverprint
	_cs aload pop setcmykcolor
	/_lp /stroke ddef
	} if
} ddef
/_ps
{
_sc
stroke
} ddef
/_pss
{
_sc
ss
} ddef
/_pjss
{
_sc
jss
} ddef
/_lp /none ddef
} def
/x
{
/_gf exch ddef
findcmykcustomcolor
/_if exch ddef
/_fc
{
_lp /fill ne
	{
	_of setoverprint
	_if _gf 1 exch sub setcustomcolor
	/_lp /fill ddef
	} if
} ddef
/_pf
{
_fc
fill
} ddef
/_psf
{
_fc
ashow
} ddef
/_pjsf
{
_fc
awidthshow
} ddef
/_lp /none ddef
} def
/X
{
/_gs exch ddef
findcmykcustomcolor
/_is exch ddef
/_sc
{
_lp /stroke ne
	{
	_os setoverprint
	_is _gs 1 exch sub setcustomcolor
	/_lp /stroke ddef
	} if
} ddef
/_ps
{
_sc
stroke
} ddef
/_pss
{
_sc
ss
} ddef
/_pjss
{
_sc
jss
} ddef
/_lp /none ddef
} def
/dp
{
dup null eq
{
pop
_dp 0 ne
	{
	0 1 _dp 1 sub _dl mod
		{
		_da exch get 3 get
		} for
	_dp 1 sub _dl mod 1 add packedarray
	_da 0 get aload pop 8 -1 roll 5 -1 roll pop 4 1 roll
	definepattern pop
	} if
}
{
_dp 0 ne _dp _dl mod 0 eq and
	{
	null dp
	} if
7 packedarray _da exch _dp _dl mod exch put
_dp _dl mod _da 0 get 4 get 2 packedarray
/_dp _dp 1 add def
} ifelse
} def
/E
{
_ed begin
dup 0 get type /arraytype ne
	{
	0
		{
		dup 1 add index type /arraytype eq
			{
			1 add
			}
			{
			exit
			} ifelse
		} loop
	array astore
	} if
/_dd exch def
/_ury exch def
/_urx exch def
/_lly exch def
/_llx exch def
/_n exch def
/_y 0 def
/_dl 4 def
/_dp 0 def
/_da _dl array def
0 1 _dd length 1 sub
	{
	/_d exch _dd exch get def
	0 2 _d length 2 sub
		{
		/_x exch def
		/_c _d _x get _ ne def
		/_r _d _x 1 add get cvlit def
		_r _ ne
			{
			_urx _llx sub _ury _lly sub [1 0 0 1 0 0] 
				[
				/save cvx
				_llx neg _lly neg /translate cvx
				_c
					{
					nc /begin cvx
					} if
				_r dup type /stringtype eq
					{
					cvx
					}
					{
					{exec} /forall cvx
					} ifelse
				_c
					{
					/end cvx
					} if
				/restore cvx
				] cvx
			/_fn 12 _n length add string def
			_y _fn cvs pop
			/_y _y 1 add def
			_fn 12 _n putinterval
			_fn _c false dp
			_d exch _x 1 add exch put
			} if
		} for
	} for
null dp
_n _dd /_pd
end xput
} def
/fc
{
_fm dup concatmatrix pop
} def
/p
{
/_fm exch ddef
9 -2 roll _pm translate fc
7 -2 roll _pm scale fc
5 -1 roll _pm rotate fc
4 -2 roll exch 0 ne
	{
	dup _pm rotate fc
	1 -1 _pm scale fc
	neg _pm rotate fc
	}
	{
	pop
	} ifelse
dup _pm rotate fc
exch dup sin exch cos div 1 0 0 1 0 6 2 roll
_pm astore fc
neg _pm rotate fc
_pd exch get /_fdd exch ddef
/_pf
{
save
/_doClip 0 ddef
0 1 _fdd length 1 sub
	{
	/_fd exch _fdd exch get ddef
	_fd
	0 2 _fd length 2 sub
		{
		gsave
		2 copy get dup _ ne
			{
			cvx exec _fc
			}
			{
			pop
			} ifelse
		2 copy 1 add get dup _ ne
			{
			aload pop findfont _fm
			patternfill
			}
			{
			pop
			fill
			} ifelse
		grestore
		pop
		} for
	pop
	} for
restore
newpath
} ddef
/_psf
{
save
/_doClip 0 ddef
0 1 _fdd length 1 sub
	{
	/_fd exch _fdd exch get ddef
	_fd
	0 2 _fd length 2 sub
		{
		gsave
		2 copy get dup _ ne
			{
			cvx exec _fc
			}
			{
			pop
			} ifelse
		2 copy 1 add get dup _ ne
			{
			aload pop findfont _fm
			9 copy 6 npop patternashow
			}
			{
			pop
			6 copy 3 npop ashow
			} ifelse
		grestore
		pop
		} for
	pop
	} for
restore
%3 npop newpath
sw rmoveto
} ddef
/_pjsf
{
save
/_doClip 0 ddef
0 1 _fdd length 1 sub
	{
	/_fd exch _fdd exch get ddef
	_fd
	0 2 _fd length 2 sub
		{
		gsave
		2 copy get dup _ ne
			{
			cvx exec _fc
			}
			{
			pop
			} ifelse
		2 copy 1 add get dup _ ne
			{
			aload pop findfont _fm
			12 copy 6 npop patternawidthshow
			}
			{
			pop 9 copy 3 npop awidthshow
			} ifelse
		grestore
		pop
		} for
	pop
	} for
restore
swj rmoveto
} ddef
/_lp /none ddef
} def
/sc
{
_sm dup concatmatrix pop
} def
/P
{
/_sm exch ddef
9 -2 roll _pm translate sc
7 -2 roll _pm scale sc
5 -1 roll _pm rotate sc
4 -2 roll exch 0 ne
	{
	dup _pm rotate sc
	1 -1 _pm scale sc
	neg _pm rotate sc
	}
	{
	pop
	} ifelse
dup _pm rotate sc
exch dup sin exch cos div 1 0 0 1 0 6 2 roll
_pm astore sc
neg _pm rotate sc
_pd exch get /_sdd exch ddef
/_ps
{
save
/_doClip 0 ddef
0 1 _sdd length 1 sub
	{
	/_sd exch _sdd exch get ddef
	_sd
	0 2 _sd length 2 sub
		{
		gsave
		2 copy get dup _ ne
			{
			cvx exec _sc
			}
			{
			pop
			} ifelse
		2 copy 1 add get dup _ ne
			{
			aload pop findfont _sm
			patternstroke
			}
			{
			pop stroke
			} ifelse
		grestore
		pop
		} for
	pop
	} for
restore
newpath
} ddef
/_pss
{
save
/_doClip 0 ddef
0 1 _sdd length 1 sub
	{
	/_sd exch _sdd exch get ddef
	_sd
	0 2 _sd length 2 sub
		{
		gsave
		2 copy get dup _ ne
			{
			cvx exec _sc
			}
			{
			pop
			} ifelse
		2 copy 1 add get dup _ ne
			{
			aload pop findfont _sm
			10 copy 6 npop patternashowstroke
			}
			{
			pop 7 copy 3 npop ss
			} ifelse
		grestore
		pop
		} for
	pop
	} for
restore
pop sw rmoveto
} ddef
/_pjss
{
save
/_doClip 0 ddef
0 1 _sdd length 1 sub
	{
	/_sd exch _sdd exch get ddef
	_sd
	0 2 _sd length 2 sub
		{
		gsave
		2 copy get dup _ ne
			{
			cvx exec _sc
			}
			{
			pop
			} ifelse
		2 copy 1 add get dup _ ne
			{
			aload pop findfont _sm
			13 copy 6 npop patternawidthshowstroke
			}
			{
			pop 10 copy 3 npop jss
			} ifelse
		grestore
		pop
		} for
	pop
	} for
restore
pop swj rmoveto
} ddef
/_lp /none ddef
} def
/A
{
pop
} def
/nc 3 dict def
nc begin
/setgray
{
pop
} bind def
/setcmykcolor
{
4 npop
} bind def
/setcustomcolor
{
2 npop
} bind def
currentdict readonly pop end
currentdict readonly pop end
setpacking
/annotatepage
{
} def
%%EndResource
%%EndProlog
%%BeginSetup
%%IncludeFont: Helvetica
%%IncludeFont: Times-Roman
Adobe_cmykcolor /initialize get exec
Adobe_cshow /initialize get exec
Adobe_customcolor /initialize get exec
Adobe_typography_AI3 /initialize get exec
Adobe_pattern_AI3 /initialize get exec
Adobe_Illustrator_AI3 /initialize get exec
[
39/quotesingle 96/grave 130/quotesinglbase/florin/quotedblbase/ellipsis
/dagger/daggerdbl/circumflex/perthousand/Scaron/guilsinglleft/OE 145/quoteleft
/quoteright/quotedblleft/quotedblright/bullet/endash/emdash/tilde/trademark
/scaron/guilsinglright/oe/dotlessi 159/Ydieresis /space 164/currency 166/brokenbar
168/dieresis/copyright/ordfeminine 172/logicalnot/hyphen/registered/macron/ring
/plusminus/twosuperior/threesuperior/acute/mu 183/periodcentered/cedilla
/onesuperior/ordmasculine 188/onequarter/onehalf/threequarters 192/Agrave
/Aacute/Acircumflex/Atilde/Adieresis/Aring/AE/Ccedilla/Egrave/Eacute
/Ecircumflex/Edieresis/Igrave/Iacute/Icircumflex/Idieresis/Eth/Ntilde
/Ograve/Oacute/Ocircumflex/Otilde/Odieresis/multiply/Oslash/Ugrave
/Uacute/Ucircumflex/Udieresis/Yacute/Thorn/germandbls/agrave/aacute
/acircumflex/atilde/adieresis/aring/ae/ccedilla/egrave/eacute/ecircumflex
/edieresis/igrave/iacute/icircumflex/idieresis/eth/ntilde/ograve/oacute
/ocircumflex/otilde/odieresis/divide/oslash/ugrave/uacute/ucircumflex
/udieresis/yacute/thorn/ydieresis
TE
%AI3_BeginEncoding: _Helvetica Helvetica
[/_Helvetica/Helvetica 0 0 1 TZ%AI3_EndEncoding AdobeType
%AI3_BeginEncoding: _Times-Roman Times-Roman
[/_Times-Roman/Times-Roman 0 0 1 TZ%AI3_EndEncoding AdobeType
%AI3_BeginPattern: (Brick)
(Brick) 0 0 72 72 [
%AI3_Tile
(0 O 0 R 0.3 0.85 0.85 0 k
 0.3 0.85 0.85 0 K
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d0 0 m
0 72 L
72 72 L
72 0 L
0 0 L
f%AI6_EndPatternLayer
) &
(0 O 0 R 1 g
 1 G
) @
(
%AI6_BeginPatternLayer
0 J 0 j 0.3 w 4 M []0 d0 68.4097 m
72 68.4097 l
S0 61.209 m
72 61.209 L
S0 54.0088 m
72 54.0088 L
S0 46.8076 m
72 46.8076 L
S0 39.6084 m
72 39.6084 L
S0 32.4072 m
72 32.4072 L
S0 25.207 m
72 25.207 L
S0 18.0059 m
72 18.0059 L
S0 10.8057 m
72 10.8057 L
S0 3.6064 m
72 3.6064 L
S68.4102 68.4097 m
68.4102 61.2217 l
S54.0098 68.4097 m
54.0098 61.2217 L
S39.6094 68.4097 m
39.6094 61.2217 L
S25.21 68.4097 m
25.21 61.2217 L
S10.8105 68.4097 m
10.8105 61.2217 L
S68.4102 53.9717 m
68.4102 46.7842 l
S54.0098 53.9717 m
54.0098 46.7842 L
S39.6094 53.9717 m
39.6094 46.7842 L
S25.21 53.9717 m
25.21 46.7842 L
S10.8105 53.9717 m
10.8105 46.7842 L
S68.4102 39.5967 m
68.4102 32.4092 l
S54.0098 39.5967 m
54.0098 32.4092 L
S39.6094 39.5967 m
39.6094 32.4092 L
S25.21 39.5967 m
25.21 32.4092 L
S10.8105 39.5967 m
10.8105 32.4092 L
S68.4102 25.2217 m
68.4102 18.0342 l
S54.0098 25.2217 m
54.0098 18.0342 L
S39.6094 25.2217 m
39.6094 18.0342 L
S25.21 25.2217 m
25.21 18.0342 L
S10.8105 25.2217 m
10.8105 18.0342 L
S68.4102 10.7842 m
68.4102 3.5967 l
S54.0098 10.7842 m
54.0098 3.5967 L
S39.6094 10.7842 m
39.6094 3.5967 L
S25.21 10.7842 m
25.21 3.5967 L
S10.8105 10.7842 m
10.8105 3.5967 L
S61.1973 3.5967 m
61.1973 0 L
S46.7969 3.5967 m
46.7969 0 L
S32.3965 3.5967 m
32.3965 0 L
S17.9971 3.5967 m
17.9971 0 L
S3.5967 3.5967 m
3.5967 0 l
S61.1973 18.0342 m
61.1973 10.8467 L
S46.7969 18.0342 m
46.7969 10.8467 L
S32.3965 18.0342 m
32.3965 10.8467 L
S17.9971 18.0342 m
17.9971 10.8467 L
S3.5967 18.0342 m
3.5967 10.8467 l
S61.1973 32.4092 m
61.1973 25.2217 L
S46.7969 32.4092 m
46.7969 25.2217 L
S17.9971 32.4092 m
17.9971 25.2217 L
S3.5967 32.4092 m
3.5967 25.2217 l
S61.1973 46.7842 m
61.1973 39.5967 L
S46.7969 46.7842 m
46.7969 39.5967 L
S32.3965 46.7842 m
32.3965 39.5967 L
S17.9971 46.7842 m
17.9971 39.5967 L
S3.5967 46.7842 m
3.5967 39.5967 l
S61.1973 61.2217 m
61.1973 54.0347 L
S46.7969 61.2217 m
46.7969 54.0347 L
S32.3965 61.2217 m
32.3965 54.0347 L
S17.9971 61.2217 m
17.9971 54.0347 L
S3.5967 61.2217 m
3.5967 54.0347 l
S61.1973 71.959 m
61.1973 68.4717 L
S46.7969 71.959 m
46.7969 68.4717 L
S32.3965 71.959 m
32.3965 68.4717 L
S17.9971 71.959 m
17.9971 68.4717 L
S3.5967 71.959 m
3.5967 68.4717 l
S32.3965 32.4092 m
32.3965 25.2217 L
S%AI6_EndPatternLayer
) &
] E
%AI3_EndPattern
%AI3_BeginPattern: (Confetti)
(Confetti) 4.85 3.617 76.85 75.617 [
%AI3_Tile
(0 O 0 R 1 g
 1 G
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d4.85 3.617 m
4.85 75.617 L
76.85 75.617 L
76.85 3.617 L
4.85 3.617 L
f%AI6_EndPatternLayer
) &
(0 O 0 R 0 g
 0 G
) @
(
%AI6_BeginPatternLayer
0 J 0 j 0.3 w 4 M []0 d10.6 64.867 m
7.85 62.867 l
S9.1 8.617 m
6.85 6.867 l
S78.1 68.617 m
74.85 67.867 l
S76.85 56.867 m
74.35 55.117 l
S79.6 51.617 m
76.6 51.617 l
S76.35 44.117 m
73.6 45.867 l
S78.6 35.867 m
76.6 34.367 l
S76.1 23.867 m
73.35 26.117 l
S78.1 12.867 m
73.85 13.617 l
S68.35 14.617 m
66.1 12.867 l
S76.6 30.617 m
73.6 30.617 l
S62.85 58.117 m
60.956 60.941 l
S32.85 59.617 m
31.196 62.181 l
S47.891 64.061 m
49.744 66.742 l
S72.814 2.769 m
73.928 5.729 l
S67.976 2.633 m
67.35 5.909 l
S61.85 27.617 m
59.956 30.441 l
S53.504 56.053 m
51.85 58.617 l
S52.762 1.779 m
52.876 4.776 l
S45.391 5.311 m
47.244 7.992 l
S37.062 3.375 m
35.639 5.43 l
S55.165 34.828 m
57.518 37.491 l
S20.795 3.242 m
22.12 5.193 l
S14.097 4.747 m
15.008 8.965 l
S9.736 1.91 m
8.073 4.225 l
S31.891 5.573 m
32.005 8.571 l
S12.1 70.367 m
15.6 68.867 l
S9.35 54.867 m
9.6 58.117 l
S12.85 31.867 m
14.35 28.117 l
S10.1 37.367 m
12.35 41.117 l
S34.1 71.117 m
31.85 68.617 l
S38.35 71.117 m
41.6 68.367 l
S55.1 71.117 m
58.35 69.117 l
S57.35 65.117 m
55.35 61.867 l
S64.35 66.367 m
69.35 68.617 l
S71.85 62.867 m
69.35 61.117 l
S23.6 70.867 m
23.6 67.867 l
S20.6 65.867 m
17.35 65.367 l
S24.85 61.367 m
25.35 58.117 l
S25.85 65.867 m
29.35 66.617 l
S14.1 54.117 m
16.85 56.117 l
S12.35 11.617 m
12.6 15.617 l
S12.1 19.867 m
14.35 22.367 l
S26.1 9.867 m
23.6 13.367 l
S34.6 47.117 m
32.1 45.367 l
S62.6 41.867 m
59.85 43.367 l
S31.6 35.617 m
27.85 36.367 l
S36.35 26.117 m
34.35 24.617 l
S33.85 14.117 m
31.1 16.367 l
S37.1 9.867 m
35.1 11.117 l
S34.35 20.867 m
31.35 20.867 l
S44.6 56.617 m
42.1 54.867 l
S47.35 51.367 m
44.35 51.367 l
S44.1 43.867 m
41.35 45.617 l
S43.35 33.117 m
42.6 30.617 l
S43.85 23.617 m
41.1 25.867 l
S44.35 15.617 m
42.35 16.867 l
S67.823 31.1 m
64.823 31.1 l
S27.1 32.617 m
29.6 30.867 l
S31.85 55.117 m
34.85 55.117 l
S19.6 40.867 m
22.1 39.117 l
S16.85 35.617 m
19.85 35.617 l
S20.1 28.117 m
22.85 29.867 l
S52.1 42.617 m
54.484 44.178 l
S52.437 50.146 m
54.821 48.325 l
S59.572 54.133 m
59.35 51.117 l
S50.185 10.055 m
53.234 9.928 l
S51.187 15.896 m
53.571 14.075 l
S58.322 19.883 m
59.445 16.823 l
S53.1 32.117 m
50.6 30.367 l
S52.85 24.617 m
49.6 25.617 l
S61.85 9.117 m
59.1 10.867 l
S69.35 34.617 m
66.6 36.367 l
S67.1 23.617 m
65.1 22.117 l
S24.435 46.055 m
27.484 45.928 l
S25.437 51.896 m
27.821 50.075 l
S62.6 47.117 m
65.321 46.575 l
S19.85 19.867 m
20.35 16.617 l
S21.85 21.867 m
25.35 22.617 l
S37.6 62.867 m
41.6 62.117 l
S38.323 42.1 m
38.823 38.6 l
S69.35 52.617 m
66.85 53.867 l
S14.85 62.117 m
18.1 59.367 l
S9.6 46.117 m
7.1 44.367 l
S20.6 51.617 m
18.6 50.117 l
S46.141 70.811 m
47.994 73.492 l
S69.391 40.561 m
71.244 43.242 l
S38.641 49.311 m
39.35 52.117 l
S25.141 16.811 m
25.85 19.617 l
S36.6 32.867 m
34.6 31.367 l
S6.1 68.617 m
2.85 67.867 l
S4.85 56.867 m
2.35 55.117 l
S7.6 51.617 m
4.6 51.617 l
S6.6 35.867 m
4.6 34.367 l
S6.1 12.867 m
1.85 13.617 l
S4.6 30.617 m
1.6 30.617 l
S72.814 74.769 m
73.928 77.729 l
S67.976 74.633 m
67.35 77.909 l
S52.762 73.779 m
52.876 76.776 l
S37.062 75.375 m
35.639 77.43 l
S20.795 75.242 m
22.12 77.193 l
S9.736 73.91 m
8.073 76.225 l
S10.1 23.617 m
6.35 24.367 l
S73.217 18.276 m
71.323 21.1 l
S28.823 39.6 m
29.505 42.389 l
S49.6 38.617 m
47.6 37.117 l
S60.323 73.6 m
62.323 76.6 l
S60.323 1.6 m
62.323 4.6 l
S%AI6_EndPatternLayer
) &
] E
%AI3_EndPattern
%AI3_BeginPattern: (Leaves - Fall )
(Leaves - Fall ) 0 0 64.0781 78.9336 [
%AI3_Tile
(0 O 0 R 0.05 0.2 1 0 k
 0.05 0.2 1 0 K
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d64.0781 78.9336 m
64.0781 0 L
0 0 L
0 78.9336 L
64.0781 78.9336 L
f%AI6_EndPatternLayer
) &
(0 O 0 R 0.83 0 1 0 k
 0.83 0 1 0 K
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d29.7578 0.9902 m
30.4346 1.1914 30.7246 1.3428 V
29.2559 4.0547 33.707 8.3359 34.627 9.0762 C
35.2275 8.8506 35.3477 6.3184 34.6699 4.9805 C
35.5137 5.1035 37.7031 3.7256 38.4609 2.4365 C
38.5254 3.125 40.0957 6.0664 40.9219 6.4434 C
40.002 6.8408 39.3359 8.3135 38.5742 9.7617 C
39.5957 9.9287 40.9961 9.0078 42.4668 8.1025 C
42.9814 8.9043 44.3555 9.875 45.6143 10.3916 C
44.5264 11.0781 44.0313 11.8203 43.5352 13.2793 C
42.4922 12.7139 40.3057 12.5645 39.7764 12.8516 C
40.291 13.9648 42.5371 14.5078 43.2676 14.4551 C
43.0137 15.3164 42.8652 17.4697 43.0391 20.0625 C
41.3789 18.7461 39.834 17.4297 38.1738 17.4883 C
38.4434 16.0664 37.8076 14.2607 37.4307 13.7676 C
36.8574 14.5117 36.4463 15.3389 36.8008 17.3164 C
35.3486 17.8008 34.1113 18.3467 32.7373 19.6045 C
32.7373 17.7734 32.166 16.5723 31.2969 15.2959 C
32.5576 14.8076 33.8301 13.6045 33.8252 12.5664 C
32.9775 12.7178 31.2852 13.4619 30.793 14.4551 C
30.0742 13.707 28.3906 12.3984 26.7871 12.3945 C
27.9746 11.5391 28.8945 10.5059 28.9893 8.5938 C
30.2422 9.5645 32.6953 10.1797 34.0752 9.582 C
29.2344 5.3457 29.7031 2.3125 29.7578 0.9902 C
f13.8525 29.9844 m
13.3281 29.5127 13.1309 29.25 V
15.623 27.4326 13.3691 21.6074 12.8555 20.5439 C
12.2168 20.4883 10.8096 23.2285 10.8457 24.7266 C
9.7129 23.9707 8.0488 24.0918 6.4463 24.3779 C
7.0186 23.2891 6.6172 21.3447 5.8164 20.5439 C
6.8184 20.5801 8.1699 19.8652 9.4785 18.8838 C
8.6436 18.0645 6.8164 18.2246 4.9004 18.8838 C
4.9004 17.5107 4.0781 15.7734 3.2412 14.5918 C
4.5576 14.6484 5.7031 13.9629 6.5605 12.9316 C
7.2256 14.5 9.2598 15.6133 10.166 15.5645 C
10.1826 14.1992 8.6094 12.1094 7.5879 11.7109 C
8.1875 11.041 9.207 9.5107 10.166 7.0947 C
10.9648 9.0205 12.1348 10.2627 13.3672 11.1953 C
12.2256 12.7578 12.3994 13.6289 12.7988 15.1074 C
13.541 14.5664 14.5723 14.1338 14.7441 12.1309 C
16.4609 12.416 17.5957 12.3447 19.0938 11.4434 C
18.6387 13.1055 18.6348 14.707 18.9551 16.4063 C
17.1055 16.2666 15.5449 16.4795 14.5156 17.9688 C
15.3457 18.1953 17.6055 18.2549 18.4795 17.3223 C
18.8066 18.3047 19.7012 19.7109 21.1475 20.4043 C
19.707 20.6641 18.7227 21.7637 17.8135 23.4492 C
17.1006 22.0332 14.873 20.3691 13.3711 20.3145 C
15.373 24.3779 15.373 27.2959 13.8525 29.9844 C
f41.2324 26.0742 m
41.5518 26.7021 41.7549 26.959 V
44.1523 25.0176 48.958 28.3262 49.8535 29.0957 C
49.7432 29.7266 47.6182 30.8643 45.9004 29.834 C
46.3408 31.123 45.4395 33.084 44.2402 34.126 C
45.9805 34.0254 48.126 35.3867 48.6484 36.1289 C
48.8701 35.1514 50.0527 33.8809 51.3379 32.8672 C
51.6895 33.8398 50.9941 35.958 50.0781 37.5605 C
51.3125 38.0605 52.4248 38.9912 52.8828 40.25 C
53.3398 38.9336 54.3428 38.2598 55.6875 37.5039 C
54.5273 36.0762 53.7471 33.9023 54.0273 33.0391 C
55.3496 33.374 56.9209 36.0918 57.0439 37.1816 C
57.9189 36.415 59.4727 35.7285 62.0537 35.4219 C
60.3535 34.3438 59.9902 32.3516 59.4063 30.9219 C
58.2588 31.3682 56.0898 31.4277 55.1152 30.8643 C
55.8281 30.2852 57.168 29.7344 59.1777 29.7207 C
59.1777 28.1758 59.6406 27.043 60.8945 25.8281 C
59.1719 25.8418 57.0723 25.3555 55.5762 24.9629 C
55.3281 26.292 54.4844 27.8887 53.3398 28.2891 C
53.334 27.4277 53.5996 25.1797 54.4844 24.5117 C
53.6201 23.9443 52.3672 22.5674 51.9102 20.8496 C
51.2881 22.1758 50.4268 23.4805 48.5645 23.9238 C
49.749 24.9766 50.584 26.9941 50.25 28.4609 C
45.1973 24.4785 42.5215 25.7773 41.2324 26.0742 C
f27.7578 38.7324 m
28.4346 38.9316 28.7246 39.084 V
27.2559 41.7969 31.707 46.0776 32.627 46.8169 C
33.2275 46.5918 33.3477 44.0586 32.6699 42.7227 C
33.5137 42.8457 35.7031 41.4678 36.4609 40.1787 C
36.5254 40.8652 38.0957 43.8066 38.9219 44.1846 C
38.002 44.582 37.3359 46.0547 36.5742 47.5039 C
37.5957 47.6709 38.9961 46.7485 40.4668 45.8438 C
40.9814 46.6445 42.3555 47.6177 43.6143 48.1328 C
42.5264 48.8198 42.0313 49.5615 41.5352 51.0205 C
40.4922 50.4556 38.3057 50.3057 37.7764 50.5938 C
38.291 51.7056 40.5371 52.2485 41.2676 52.1958 C
41.0137 53.0576 40.8652 55.2109 41.0391 57.8037 C
39.3789 56.4878 37.834 55.1719 36.1738 55.2285 C
36.4434 53.8076 35.8076 52.002 35.4307 51.5088 C
34.8574 52.2529 34.4463 53.0796 34.8008 55.0576 C
33.3486 55.5425 32.1113 56.0879 30.7373 57.3467 C
30.7373 55.5146 30.166 54.314 29.2969 53.0366 C
30.5576 52.5488 31.8301 51.3467 31.8252 50.3076 C
30.9775 50.46 29.2852 51.2036 28.793 52.1958 C
28.0742 51.4497 26.3906 50.1396 24.7871 50.1357 C
25.9746 49.2817 26.8945 48.2466 26.9893 46.335 C
28.2422 47.3057 30.6953 47.9209 32.0752 47.3237 C
27.2344 43.0869 27.7031 40.0547 27.7578 38.7324 C
f13.5195 70.3916 m
12.9941 69.9209 12.7988 69.6587 V
15.2891 67.8418 13.0352 62.0146 12.5225 60.9517 C
11.8828 60.8955 10.4766 63.6367 10.5117 65.1348 C
9.3809 64.3789 7.7148 64.4995 6.1133 64.7856 C
6.6855 63.6987 6.2842 61.7529 5.4834 60.9517 C
6.4854 60.9878 7.8359 60.2729 9.1455 59.2925 C
8.3105 58.4717 6.4834 58.6338 4.5674 59.2925 C
4.5674 57.9189 3.7461 56.1816 2.9082 54.9995 C
4.2246 55.0576 5.3691 54.3706 6.2275 53.3408 C
6.8926 54.9097 8.9258 56.0215 9.832 55.9727 C
9.8496 54.6079 8.2764 52.5176 7.2539 52.1187 C
7.8545 51.4497 8.873 49.9189 9.832 47.5039 C
10.6309 49.4297 11.8008 50.6719 13.0342 51.6045 C
11.8926 53.1655 12.0664 54.0366 12.4648 55.5146 C
13.209 54.9746 14.2393 54.5415 14.4102 52.5386 C
16.127 52.8247 17.2637 52.7529 18.7598 51.8525 C
18.3057 53.5137 18.3027 55.1147 18.623 56.8149 C
16.7725 56.6748 15.2129 56.8887 14.1826 58.377 C
15.0117 58.6035 17.2725 58.6626 18.1465 57.731 C
18.4736 58.7129 19.3691 60.1187 20.8145 60.8125 C
19.375 61.0728 18.3896 62.1719 17.4805 63.8579 C
16.7676 62.4429 14.541 60.7769 13.0371 60.7227 C
15.041 64.7856 15.041 67.7046 13.5195 70.3916 C
f41.2324 64.4824 m
41.5518 65.1113 41.7549 65.3682 V
44.1523 63.4272 48.958 66.7354 49.8535 67.5034 C
49.7432 68.1362 47.6182 69.2725 45.9004 68.2422 C
46.3408 69.5313 45.4395 71.4922 44.2402 72.5342 C
45.9805 72.4341 48.126 73.7954 48.6484 74.5371 C
48.8701 73.5601 50.0527 72.29 51.3379 71.2754 C
51.6895 72.249 50.9941 74.3662 50.0781 75.9683 C
51.3125 76.4692 52.4248 77.3994 52.8828 78.6582 C
53.3398 77.3423 54.3428 76.667 55.6875 75.9111 C
54.5273 74.4844 53.7471 72.3101 54.0273 71.4473 C
55.3496 71.7822 56.9209 74.5 57.0439 75.5903 C
57.9189 74.8232 59.4727 74.1372 62.0537 73.8311 C
60.3535 72.7534 59.9902 70.7612 59.4063 69.3301 C
58.2588 69.7773 56.0898 69.8364 55.1152 69.2725 C
55.8281 68.6934 57.168 68.1431 59.1777 68.1284 C
59.1777 66.583 59.6406 65.4512 60.8945 64.2373 C
59.1719 64.249 57.0723 63.7632 55.5762 63.3721 C
55.3281 64.7002 54.4844 66.2974 53.3398 66.6973 C
53.334 65.8364 53.5996 63.5874 54.4844 62.9214 C
53.6201 62.353 52.3672 60.9751 51.9102 59.2583 C
51.2881 60.583 50.4268 61.8882 48.5645 62.333 C
49.749 63.3862 50.584 65.4033 50.25 66.8691 C
45.1973 62.8872 42.5215 64.1851 41.2324 64.4824 C
f%AI6_EndPatternLayer
) &
] E
%AI3_EndPattern
%AI3_BeginPattern: (Stripes)
(Stripes) 8.45 4.6001 80.45 76.6001 [
%AI3_Tile
(0 O 0 R 1 0.07 1 0 k
 1 0.07 1 0 K
) @
(
%AI6_BeginPatternLayer
0 J 0 j 3.6 w 4 M []0 d8.2 8.2 m
80.7 8.2 L
S8.2 22.6001 m
80.7 22.6001 L
S8.2 37.0002 m
80.7 37.0002 L
S8.2 51.4 m
80.7 51.4 L
S8.2 65.8001 m
80.7 65.8001 L
S8.2 15.4 m
80.7 15.4 L
S8.2 29.8001 m
80.7 29.8001 L
S8.2 44.2 m
80.7 44.2 L
S8.2 58.6001 m
80.7 58.6001 L
S8.2 73.0002 m
80.7 73.0002 L
S%AI6_EndPatternLayer
) &
] E
%AI3_EndPattern
%%EndSetup
0 A
0 To
1 0 0 1 143.7139 340.8281 0 Tp
TP
0 Tr
0 O
0 0 0 1 k
0 J 0 j 1 w 4 M []0 d/_Times-Roman 10.8 Tf
0 Ts
100 Tz
0 Tt
1 TA
0 0 5 TC
100 100 200 TW
0 0 0 Ti
0 Ta
0 Tq
0 0 Tl
0 Tc
0 Tw
(\(a\)) Tx 1 0 Tk
(\r) TX 
TO
8 i
0 R
0 0 0 1 K
0.45 w 10 M142.1406 365.7925 m
116.8423 356.0059 l
S0 O
0.75 g
0.6 w158.0425 366.1528 m
158.0425 365.5391 157.8838 364.9492 157.5913 364.4009 c
157.3159 363.8843 156.9224 363.4038 156.4321 362.9741 c
155.9048 362.5122 155.2656 362.1084 154.5415 361.7808 c
153.9063 361.4937 153.2056 361.2646 152.457 361.106 c
151.6763 360.9399 150.8438 360.8501 149.9795 360.8501 c
149.5366 360.8501 149.1021 360.8735 148.6782 360.9189 c
147.9951 360.9922 147.3408 361.1216 146.7266 361.2998 c
146.0728 361.4897 145.4644 361.7354 144.9155 362.0273 c
144.2651 362.373 143.6982 362.7837 143.2378 363.2441 c
142.8203 363.6616 142.4897 364.1201 142.2637 364.6084 c
142.0376 365.0972 141.916 365.6157 141.916 366.1528 c
141.916 366.4238 141.9473 366.6904 142.0068 366.9507 c
142.0664 367.2109 142.1553 367.4653 142.2705 367.7119 c
142.4023 367.9937 142.5688 368.2656 142.7666 368.5254 c
143.0425 368.8872 143.3794 369.2251 143.7681 369.5337 c
144.0483 369.7559 144.356 369.9629 144.687 370.1523 c
145.0215 370.3438 145.3799 370.5176 145.7593 370.6714 c
146.1333 370.8228 146.5273 370.9546 146.938 371.0649 c
147.1646 371.1255 147.396 371.1797 147.6323 371.2271 c
148.0557 371.3115 148.4941 371.374 148.9443 371.4121 c
149.2832 371.4409 149.6289 371.4556 149.9795 371.4556 c
150.4551 371.4556 150.9209 371.4282 151.374 371.376 c
151.7754 371.3301 152.167 371.2642 152.5454 371.1807 c
152.8447 371.1147 153.1362 371.0371 153.4189 370.9492 c
154.0581 370.7505 154.6509 370.4985 155.1846 370.2017 c
155.5259 370.0117 155.8428 369.8032 156.1323 369.5791 c
156.4502 369.3325 156.7344 369.0664 156.9805 368.7842 c
157.3037 368.4131 157.5605 368.0137 157.7407 367.5938 c
157.9375 367.1357 158.0425 366.6523 158.0425 366.1528 c
158.0425 366.1528 l
b0.0156 0.0352 0.0312 1 K
1 J 1 j157.3174 368.1621 m
158 367.6528 158.6226 367.2666 159.1855 367.0034 c
159.7646 366.7324 160.2808 366.5923 160.7339 366.5825 c
161.187 366.5728 161.5771 366.6938 161.9043 366.9458 c
162.1646 367.146 162.4248 367.3462 162.6851 367.5464 c
163.0811 367.8506 163.4766 368.1548 163.8726 368.459 c
164.1875 368.7012 164.5024 368.9434 164.8174 369.1855 c
165.0483 369.3638 165.2813 369.4985 165.5161 369.5898 c
165.8569 369.7227 166.2021 369.7642 166.5513 369.7148 c
166.9736 369.6553 167.4023 369.4629 167.8379 369.1372 c
167.9746 369.0352 168.1113 368.9331 168.248 368.8311 c
168.689 368.502 169.1294 368.1729 169.5698 367.8438 c
170.0356 367.4961 170.5015 367.1479 170.9678 366.7998 c
171.1587 366.6572 171.3486 366.54 171.5371 366.4487 c
172.0166 366.2163 172.4873 366.1489 172.9507 366.2466 c
173.3013 366.3208 173.6475 366.4893 173.9893 366.7524 c
174.2461 366.9497 174.5029 367.147 174.7593 367.3442 c
175.165 367.6563 175.5708 367.9683 175.9766 368.2808 c
176.2852 368.5181 176.5938 368.7554 176.9028 368.9932 c
177.1377 369.1738 177.3745 369.3101 177.6138 369.4014 c
177.9849 369.543 178.3608 369.5771 178.7422 369.5039 c
179.1304 369.4292 179.5239 369.2427 179.9229 368.9443 c
180.1211 368.7964 180.3188 368.6484 180.5166 368.501 c
180.9409 368.1846 181.3647 367.8682 181.7886 367.5518 c
182.21 367.2368 182.6313 366.9224 183.0532 366.6074 c
183.2461 366.4634 183.4375 366.3457 183.6274 366.2539 c
184.0083 366.0698 184.3843 365.9897 184.7554 366.0146 c
185.2021 366.0444 185.6416 366.2256 186.0742 366.5586 c
186.2969 366.73 186.5195 366.9014 186.7422 367.0728 c
187.1655 367.3979 187.5884 367.7231 188.0112 368.0483 c
188.3364 368.2988 188.6616 368.5493 188.9873 368.7998 c
189.1841 368.9512 189.4038 369.0552 189.6465 369.1118 c
190.0825 369.2139 190.5918 369.1631 191.1748 368.9595 c
191.4976 368.8467 191.8428 368.6875 192.2109 368.481 c
192.6353 368.2437 193.0894 367.9443 193.5737 367.583 c
S0 0 0 1 K
0 J 0 j 0.45 w158.0547 365.6587 m
182.9204 356.0337 l
Su0.0156 0.0352 0.0312 1 K
1 J 1 j 0.66 w149.7451 387.4141 m
150.2139 388.0444 150.4482 388.562 150.4473 388.9673 c
150.4468 389.1636 150.3911 389.333 150.2803 389.4761 c
150.123 389.6802 149.9653 389.8848 149.8081 390.0889 c
149.627 390.3242 149.4458 390.5591 149.2651 390.7944 c
149.0957 391.0132 149.0117 391.2363 149.0142 391.4634 c
149.0166 391.6899 149.1045 391.9204 149.2788 392.1543 c
149.4614 392.4009 149.6445 392.647 149.8276 392.8936 c
149.9922 393.1147 150.1567 393.3354 150.3208 393.5566 c
150.4712 393.7583 150.5571 393.9575 150.5791 394.1538 c
150.6079 394.4126 150.5259 394.6665 150.3335 394.916 c
150.1772 395.1187 150.0215 395.3208 149.8657 395.5229 c
149.6831 395.7603 149.5005 395.9971 149.3174 396.2349 c
149.1934 396.396 149.1152 396.5591 149.0835 396.7241 c
149.0288 397.0088 149.1113 397.2988 149.3315 397.5942 c
149.5059 397.8286 149.6797 398.063 149.8535 398.2969 c
150.0269 398.5303 150.2002 398.7637 150.3735 398.9976 c
150.5244 399.2007 150.6108 399.4014 150.6323 399.5991 c
150.6602 399.8564 150.5786 400.1094 150.3867 400.3569 c
150.1763 400.6299 149.9668 400.9028 149.7568 401.1758 c
149.6284 401.3423 149.5 401.5088 149.3716 401.6753 c
149.2021 401.895 149.1621 402.1763 149.251 402.52 c
149.3398 402.8638 149.5586 403.269 149.9063 403.7363 c
S149.7446 371.3662 m
149.9512 371.644 150.1123 371.8999 150.228 372.1338 c
150.5015 372.688 150.5186 373.1196 150.2798 373.4282 c
150.1172 373.6396 149.9541 373.8511 149.791 374.0625 c
149.6157 374.2905 149.4404 374.5186 149.2651 374.7466 c
149.1807 374.856 149.1172 374.9663 149.0752 375.0776 c
148.9497 375.4126 149.0171 375.7554 149.2788 376.1064 c
149.4941 376.3965 149.71 376.687 149.9258 376.9771 c
150.0571 377.1543 150.189 377.3315 150.3208 377.5088 c
150.4688 377.7075 150.5542 377.9038 150.5781 378.0977 c
150.6099 378.3594 150.5283 378.6162 150.3335 378.8682 c
150.1621 379.0908 149.9907 379.313 149.8193 379.5352 c
149.6523 379.7524 149.4849 379.9692 149.3169 380.187 c
149.1479 380.4067 149.0645 380.6299 149.0669 380.8564 c
149.0693 381.083 149.1577 381.313 149.3315 381.5464 c
149.4883 381.7578 149.645 381.9688 149.8018 382.1797 c
149.9922 382.436 150.1826 382.6929 150.3735 382.9497 c
150.5366 383.1689 150.6245 383.3853 150.6367 383.5981 c
150.6504 383.8394 150.5669 384.0762 150.3862 384.3091 c
150.1904 384.5625 149.9956 384.8164 149.8008 385.0698 c
149.6577 385.2559 149.5146 385.4419 149.3716 385.6274 c
149.1641 385.8965 149.1504 386.2583 149.3306 386.7129 c
149.4443 387.001 149.6362 387.3262 149.9058 387.6885 c
SU0 0 0 1 K
0 J 0 j 0.45 w182.7402 416.4946 m
149.7402 403.8345 l
S116.8096 416.4604 m
149.8096 403.8003 l
S240.2676 365.792 m
214.9688 356.0059 l
S256.1816 365.6582 m
281.0469 356.0332 l
S280.8672 416.4941 m
247.8672 403.834 l
S214.9365 416.46 m
247.9365 403.7998 l
S330.3076 365.792 m
305.0088 356.0059 l
S346.2217 365.6582 m
371.0869 356.0332 l
S370.9072 416.4941 m
337.9072 403.834 l
S304.9766 416.46 m
337.9766 403.7998 l
S0 To
1 0 0 1 194.25 381.75 0 Tp
TP
0 Tr
0 O
0 0 0 1 k
1 w 4 M/_Helvetica 18 Tf
(+) Tx 1 0 Tk
(\r) TX 
TO
0 To
1 0 0 1 290.7422 381.6455 0 Tp
TP
0 Tr
(+) Tx 1 0 Tk
(\r) TX 
TO
0 To
1 0 0 1 284.4922 440.3955 0 Tp
TP
0 Tr
/_Helvetica 14 Tf
(BH) Tx 1 0 Tk
(\r) TX 
TO
0 To
1 0 0 1 130.6206 440.3955 0 Tp
TP
0 Tr
(D) Tx 1 70 Tk
(VCS) Tx 1 0 Tk
(\r) TX 
TO
0 To
1 0 0 1 241.8975 340.8281 0 Tp
TP
0 Tr
/_Times-Roman 10.8 Tf
(\(b\)) Tx 1 0 Tk
(\r) TX 
TO
0 To
1 0 0 1 332.4375 340.8281 0 Tp
TP
0 Tr
(\(c\)) Tx 1 0 Tk
(\r) TX 
TO
u0 R
0.0156 0.0352 0.0312 1 K
1 J 1 j 0.66 w 10 M247.6909 387.522 m
248.1597 388.1523 248.394 388.6699 248.3931 389.0752 c
248.3926 389.2715 248.3369 389.4409 248.2261 389.584 c
248.0688 389.7881 247.9111 389.9927 247.7539 390.1968 c
247.5728 390.4321 247.3916 390.667 247.2109 390.9023 c
247.0415 391.1211 246.9575 391.3442 246.96 391.5713 c
246.9624 391.7979 247.0503 392.0283 247.2246 392.2622 c
247.4072 392.5088 247.5903 392.7549 247.7734 393.0015 c
247.938 393.2227 248.1025 393.4434 248.2666 393.6646 c
248.417 393.8662 248.5029 394.0654 248.5249 394.2617 c
248.5537 394.5205 248.4717 394.7744 248.2793 395.0239 c
248.123 395.2266 247.9673 395.4287 247.8115 395.6309 c
247.6289 395.8682 247.4463 396.105 247.2632 396.3428 c
247.1392 396.5039 247.061 396.667 247.0293 396.832 c
246.9746 397.1167 247.0571 397.4067 247.2773 397.7021 c
247.4517 397.9365 247.6255 398.1709 247.7993 398.4048 c
247.9727 398.6382 248.146 398.8716 248.3193 399.1055 c
248.4702 399.3086 248.5566 399.5093 248.5781 399.707 c
248.606 399.9644 248.5244 400.2173 248.3325 400.4648 c
248.1221 400.7378 247.9126 401.0107 247.7026 401.2837 c
247.5742 401.4502 247.4458 401.6167 247.3174 401.7832 c
247.1479 402.0029 247.1079 402.2842 247.1968 402.6279 c
247.2856 402.9717 247.5044 403.377 247.8521 403.8442 c
S247.6904 371.4741 m
247.897 371.752 248.0581 372.0078 248.1738 372.2417 c
248.4473 372.7959 248.4644 373.2275 248.2256 373.5361 c
248.063 373.7476 247.8999 373.959 247.7368 374.1704 c
247.5615 374.3984 247.3862 374.6265 247.2109 374.8545 c
247.1265 374.9639 247.063 375.0742 247.021 375.1855 c
246.8955 375.5205 246.9629 375.8633 247.2246 376.2144 c
247.4399 376.5044 247.6558 376.7949 247.8716 377.085 c
248.0029 377.2622 248.1348 377.4395 248.2666 377.6167 c
248.4146 377.8154 248.5 378.0117 248.5239 378.2056 c
248.5557 378.4673 248.4741 378.7241 248.2793 378.9761 c
248.1079 379.1987 247.9365 379.4209 247.7651 379.6431 c
247.5981 379.8604 247.4307 380.0771 247.2627 380.2949 c
247.0938 380.5146 247.0103 380.7378 247.0127 380.9644 c
247.0151 381.1909 247.1035 381.4209 247.2773 381.6543 c
247.4341 381.8657 247.5908 382.0767 247.7476 382.2876 c
247.938 382.5439 248.1284 382.8008 248.3193 383.0576 c
248.4824 383.2769 248.5703 383.4932 248.5825 383.7061 c
248.5962 383.9473 248.5127 384.1841 248.332 384.417 c
248.1362 384.6704 247.9414 384.9243 247.7466 385.1777 c
247.6035 385.3638 247.4604 385.5498 247.3174 385.7354 c
247.1099 386.0044 247.0962 386.3662 247.2764 386.8208 c
247.3901 387.1089 247.582 387.4341 247.8516 387.7964 c
SUu337.7119 387.4292 m
338.1807 388.0596 338.415 388.5771 338.4141 388.9824 c
338.4136 389.1787 338.3579 389.3481 338.2471 389.4912 c
338.0898 389.6953 337.9321 389.8999 337.7749 390.104 c
337.5938 390.3394 337.4126 390.5742 337.2319 390.8096 c
337.0625 391.0283 336.9785 391.2515 336.981 391.4785 c
336.9834 391.7051 337.0713 391.9355 337.2456 392.1694 c
337.4282 392.416 337.6113 392.6621 337.7944 392.9087 c
337.959 393.1299 338.1235 393.3506 338.2876 393.5718 c
338.438 393.7734 338.5239 393.9727 338.5459 394.1689 c
338.5747 394.4277 338.4927 394.6816 338.3003 394.9312 c
338.144 395.1338 337.9883 395.3359 337.8325 395.5381 c
337.6499 395.7754 337.4673 396.0122 337.2842 396.25 c
337.1602 396.4111 337.082 396.5742 337.0503 396.7393 c
336.9956 397.0239 337.0781 397.314 337.2983 397.6094 c
337.4727 397.8438 337.6465 398.0781 337.8203 398.312 c
337.9937 398.5454 338.167 398.7788 338.3403 399.0127 c
338.4912 399.2158 338.5776 399.4165 338.5991 399.6143 c
338.627 399.8716 338.5454 400.1245 338.3535 400.3721 c
338.1431 400.645 337.9336 400.918 337.7236 401.1909 c
337.5952 401.3574 337.4668 401.5239 337.3384 401.6904 c
337.1689 401.9102 337.1289 402.1914 337.2178 402.5352 c
337.3066 402.8789 337.5254 403.2842 337.873 403.7515 c
S337.7114 371.3813 m
337.918 371.6592 338.0791 371.915 338.1948 372.1489 c
338.4683 372.7031 338.4854 373.1348 338.2466 373.4434 c
338.084 373.6548 337.9209 373.8662 337.7578 374.0776 c
337.5825 374.3057 337.4072 374.5337 337.2319 374.7617 c
337.1475 374.8711 337.084 374.9814 337.042 375.0928 c
336.9165 375.4277 336.9839 375.7705 337.2456 376.1216 c
337.4609 376.4116 337.6768 376.7021 337.8926 376.9922 c
338.0239 377.1694 338.1558 377.3467 338.2876 377.5239 c
338.4355 377.7227 338.521 377.9189 338.5449 378.1128 c
338.5767 378.3745 338.4951 378.6313 338.3003 378.8833 c
338.1289 379.106 337.9575 379.3281 337.7861 379.5503 c
337.6191 379.7676 337.4517 379.9844 337.2837 380.2021 c
337.1147 380.4219 337.0313 380.645 337.0337 380.8716 c
337.0361 381.0981 337.1245 381.3281 337.2983 381.5615 c
337.4551 381.7729 337.6118 381.9839 337.7686 382.1948 c
337.959 382.4512 338.1494 382.708 338.3403 382.9648 c
338.5034 383.1841 338.5913 383.4004 338.6035 383.6133 c
338.6172 383.8545 338.5337 384.0913 338.353 384.3242 c
338.1572 384.5776 337.9624 384.8315 337.7676 385.085 c
337.6245 385.271 337.4814 385.457 337.3384 385.6426 c
337.1309 385.9116 337.1172 386.2734 337.2974 386.728 c
337.4111 387.0161 337.603 387.3413 337.8726 387.7036 c
SU0 O
0.75 g
0 0 0 1 K
0 J 0 j 0.6 w256.1885 366.1528 m
256.1885 365.5391 256.0293 364.9492 255.7373 364.4009 c
255.4619 363.8843 255.0684 363.4038 254.5781 362.9741 c
254.0508 362.5122 253.4111 362.1084 252.6875 361.7808 c
252.0518 361.4937 251.3516 361.2646 250.6025 361.106 c
249.8223 360.9399 248.9893 360.8501 248.125 360.8501 c
247.6826 360.8501 247.248 360.8735 246.8242 360.9189 c
246.1406 360.9922 245.4863 361.1216 244.8721 361.2998 c
244.2188 361.4897 243.6104 361.7354 243.0615 362.0273 c
242.4111 362.373 241.8438 362.7837 241.3838 363.2441 c
240.9658 363.6616 240.6357 364.1201 240.4092 364.6084 c
240.1836 365.0972 240.0615 365.6157 240.0615 366.1528 c
240.0615 366.4238 240.0928 366.6904 240.1523 366.9507 c
240.2119 367.2109 240.3008 367.4653 240.416 367.7119 c
240.5479 367.9937 240.7148 368.2656 240.9121 368.5254 c
241.1885 368.8872 241.5254 369.2251 241.9141 369.5337 c
242.1943 369.7559 242.502 369.9629 242.833 370.1523 c
243.167 370.3438 243.5254 370.5176 243.9053 370.6714 c
244.2793 370.8228 244.6729 370.9546 245.084 371.0649 c
245.3105 371.1255 245.542 371.1797 245.7783 371.2271 c
246.2012 371.3115 246.6396 371.374 247.0898 371.4121 c
247.4287 371.4409 247.7744 371.4556 248.125 371.4556 c
248.6006 371.4556 249.0664 371.4282 249.5195 371.376 c
249.9209 371.3301 250.3125 371.2642 250.6914 371.1807 c
250.9902 371.1147 251.2822 371.0371 251.5645 370.9492 c
252.2041 370.7505 252.7969 370.4985 253.3301 370.2017 c
253.6719 370.0117 253.9883 369.8032 254.2783 369.5791 c
254.5957 369.3325 254.8799 369.0664 255.126 368.7842 c
255.4492 368.4131 255.7061 368.0137 255.8867 367.5938 c
256.083 367.1357 256.1885 366.6523 256.1885 366.1528 c
256.1885 366.1528 l
b346.4385 366.1528 m
346.4385 365.5391 346.2793 364.9492 345.9873 364.4009 c
345.7119 363.8843 345.3184 363.4038 344.8281 362.9741 c
344.3008 362.5122 343.6611 362.1084 342.9375 361.7808 c
342.3018 361.4937 341.6016 361.2646 340.8525 361.106 c
340.0723 360.9399 339.2393 360.8501 338.375 360.8501 c
337.9326 360.8501 337.498 360.8735 337.0742 360.9189 c
336.3906 360.9922 335.7363 361.1216 335.1221 361.2998 c
334.4688 361.4897 333.8604 361.7354 333.3115 362.0273 c
332.6611 362.373 332.0938 362.7837 331.6338 363.2441 c
331.2158 363.6616 330.8857 364.1201 330.6592 364.6084 c
330.4336 365.0972 330.3115 365.6157 330.3115 366.1528 c
330.3115 366.4238 330.3428 366.6904 330.4023 366.9507 c
330.4619 367.2109 330.5508 367.4653 330.666 367.7119 c
330.7979 367.9937 330.9648 368.2656 331.1621 368.5254 c
331.4385 368.8872 331.7754 369.2251 332.1641 369.5337 c
332.4443 369.7559 332.752 369.9629 333.083 370.1523 c
333.417 370.3438 333.7754 370.5176 334.1553 370.6714 c
334.5293 370.8228 334.9229 370.9546 335.334 371.0649 c
335.5605 371.1255 335.792 371.1797 336.0283 371.2271 c
336.4512 371.3115 336.8896 371.374 337.3398 371.4121 c
337.6787 371.4409 338.0244 371.4556 338.375 371.4556 c
338.8506 371.4556 339.3164 371.4282 339.7695 371.376 c
340.1709 371.3301 340.5625 371.2642 340.9414 371.1807 c
341.2402 371.1147 341.5322 371.0371 341.8145 370.9492 c
342.4541 370.7505 343.0469 370.4985 343.5801 370.2017 c
343.9219 370.0117 344.2383 369.8032 344.5283 369.5791 c
344.8457 369.3325 345.1299 369.0664 345.376 368.7842 c
345.6992 368.4131 345.9561 368.0137 346.1367 367.5938 c
346.333 367.1357 346.4385 366.6523 346.4385 366.1528 c
346.4385 366.1528 l
b0.0156 0.0352 0.0312 1 K
1 J 1 j257.9453 407.4531 m
258.6279 406.9438 259.25 406.5576 259.8135 406.2944 c
260.3926 406.0234 260.9082 405.8833 261.3613 405.8735 c
261.8145 405.8638 262.2051 405.9849 262.5322 406.2368 c
262.792 406.437 263.0527 406.6372 263.3125 406.8374 c
263.709 407.1416 264.1045 407.4458 264.5 407.75 c
264.8154 407.9922 265.1299 408.2344 265.4453 408.4766 c
265.6758 408.6548 265.9092 408.7896 266.1436 408.8809 c
266.4844 409.0137 266.8301 409.0552 267.1787 409.0059 c
267.6016 408.9463 268.0303 408.7539 268.4658 408.4282 c
268.6025 408.3262 268.7393 408.2241 268.876 408.1221 c
269.3164 407.793 269.7568 407.4639 270.1973 407.1348 c
270.6631 406.7871 271.1289 406.439 271.5957 406.0908 c
271.7861 405.9482 271.9766 405.8311 272.165 405.7397 c
272.6445 405.5073 273.1152 405.4399 273.5781 405.5376 c
273.9287 405.6118 274.2754 405.7803 274.6172 406.0435 c
274.874 406.2407 275.1309 406.438 275.3867 406.6353 c
275.793 406.9473 276.1982 407.2593 276.6045 407.5718 c
276.9131 407.8091 277.2217 408.0464 277.5303 408.2842 c
277.7656 408.4648 278.002 408.6011 278.2412 408.6924 c
278.6123 408.834 278.9883 408.8682 279.3701 408.7949 c
279.7578 408.7202 280.1514 408.5337 280.5508 408.2354 c
280.749 408.0874 280.9463 407.9395 281.1445 407.792 c
281.5684 407.4756 281.9922 407.1592 282.416 406.8428 c
282.8379 406.5278 283.2588 406.2134 283.6807 405.8984 c
283.874 405.7544 284.0654 405.6367 284.2549 405.5449 c
284.6357 405.3608 285.0117 405.2808 285.3828 405.3057 c
285.8301 405.3354 286.2695 405.5166 286.7021 405.8496 c
286.9248 406.021 287.1475 406.1924 287.3701 406.3638 c
287.793 406.689 288.2158 407.0142 288.6387 407.3394 c
288.9639 407.5898 289.2891 407.8403 289.6152 408.0908 c
289.8115 408.2422 290.0313 408.3462 290.2744 408.4028 c
290.71 408.5049 291.2197 408.4541 291.8027 408.2505 c
292.125 408.1377 292.4707 407.9785 292.8389 407.772 c
293.2627 407.5347 293.7168 407.2354 294.2012 406.874 c
S318.1772 411.5776 m
318.3022 411.8809 318.4282 412.1846 318.5527 412.4883 c
318.7441 412.9497 318.9346 413.4111 319.125 413.8721 c
319.2773 414.2397 319.4282 414.6064 319.5806 414.9741 c
319.6909 415.2437 319.8257 415.4771 319.9829 415.6733 c
320.2119 415.9585 320.4902 416.1675 320.8169 416.2993 c
321.2129 416.459 321.6802 416.5068 322.2202 416.4424 c
322.3896 416.4224 322.5591 416.4023 322.7285 416.3823 c
323.2749 416.3174 323.8208 416.2529 324.3667 416.188 c
324.9438 416.1196 325.5215 416.0513 326.0996 415.9829 c
326.3359 415.9551 326.5596 415.9487 326.7681 415.9639 c
327.2998 416.0024 327.7412 416.1792 328.0933 416.4951 c
328.3599 416.7349 328.5757 417.0542 328.7402 417.4526 c
328.8638 417.752 328.9878 418.0513 329.1104 418.3501 c
329.3062 418.8232 329.5015 419.2964 329.6968 419.77 c
329.8457 420.1299 329.9941 420.4897 330.1426 420.8501 c
330.2559 421.124 330.3926 421.3604 330.5542 421.5591 c
330.8047 421.8672 331.1133 422.0845 331.4805 422.2119 c
331.8535 422.3413 332.2876 422.3765 332.7827 422.3179 c
333.0283 422.2891 333.2734 422.2593 333.5186 422.231 c
334.0439 422.1685 334.5693 422.1064 335.0942 422.0444 c
335.6172 421.9829 336.1392 421.9209 336.6616 421.8589 c
336.9014 421.8311 337.126 421.8247 337.3359 421.8398 c
337.7578 421.8711 338.1235 421.9897 338.4321 422.1968 c
338.8047 422.4463 339.0947 422.8228 339.3027 423.3276 c
339.4102 423.5874 339.5171 423.8472 339.624 424.1069 c
339.8276 424.5996 340.0313 425.0928 340.2349 425.5859 c
340.3916 425.9653 340.5479 426.3447 340.7051 426.7251 c
340.7993 426.9541 340.9375 427.1543 341.1201 427.3247 c
341.4463 427.6309 341.9131 427.8418 342.5195 427.957 c
342.855 428.0205 343.2339 428.0552 343.6563 428.0605 c
344.1421 428.0669 344.6851 428.0347 345.2852 427.9644 c
S0 i
0 0 0 1 K
0 J 0 j 1 w209.5 424 m
209.5 433.5 l
378 433.5 l
378 424 l
S%%PageTrailer
gsave annotatepage grestore showpage
%%Trailer
Adobe_Illustrator_AI3 /terminate get exec
Adobe_pattern_AI3 /terminate get exec
Adobe_typography_AI3 /terminate get exec
Adobe_customcolor /terminate get exec
Adobe_cshow /terminate get exec
Adobe_cmykcolor /terminate get exec
Adobe_packedarray /terminate get exec
%%EOF
